---
import {type CollectionEntry} from 'astro:content'

import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import {POST_HEADER, FOOTER, GISCUS_BLOG, BG_RANDOM_IMAGE_SRC, SOURCE} from "../consts";
import PostHeader from "../components/post/PostHeader.astro";
import TagShowcase from "../components/post/TagShowcase.astro";
import Giscus from "../components/post/Giscus.astro";
import IconLink from "../components/ui/IconLink.astro";
import Date from "../components/post/Date.astro";
import Article from "../components/Article.astro";
import ImageLen from "../components/ImageLen.astro";
import ViewStatistics from "../components/post/ViewStatistics.astro";
import IconButton from "../components/ui/IconButton.astro";

interface Props {
    source_base: string
    entry: CollectionEntry<'blog'>
}

const {source_base, entry} = Astro.props;

const bodyStyle = `background-image: url('${entry.data.backgroundImage || BG_RANDOM_IMAGE_SRC || ""}')`

const sideImage = entry.data.sideImage?.startsWith('/') || entry.data.sideImage?.startsWith('https://') ? entry.data.sideImage : `/blog/${entry.slug}/${entry.data.sideImage}`
---

<html class="scroll-smooth" lang={entry.data.lang}>
<head>
    <base target="_blank"/>
    <BaseHead title={entry.data.title} data={entry.data}/>
</head>

<body class="dark" style={bodyStyle}>
<div class="sticky top-0">
    <PostHeader header={POST_HEADER} prefix="blog">
        <IconButton id="ToggleList" class="ml-10" icon="format_list_bulleted"/>
    </PostHeader>
    <div id="Titles"
         class="hidden fixed h-screen overflow-y-scroll p-10 right-0 flex-col gap-2 rounded-l-2xl duration-200 shadow-2xl bg-opacity-90 dark:bg-opacity-80 bg-light dark:bg-dark">
        <a target="_self" href="#" class="font-bold">{entry.data.title}</a>
    </div>
</div>
<main class="min-h-screen p-5 lg:p-20 flex flex-col gap-10 bg-opacity bg-light dark:bg-dark">
    <div class="flex flex-wrap gap-5 justify-between">
        <div class="flex flex-col gap-5">
            <div class="font-bold text-5xl">{entry.data.title}</div>
            <div class="text-2xl">{entry.data.description}</div>
            <div class="flex flex-wrap gap-5 items-center">
                <IconLink icon="history" href={`${SOURCE.base}/${source_base}/${entry.id}`} text="History"/>
                <div class="text-gray-500">
                    {
                        entry.data.updateDate &&
                            <div>Updated at
                                <Date date={entry.data.updateDate}/>
                            </div>
                    }
                    <div>Published at
                        <Date date={entry.data.pubDate}/>
                    </div>
                </div>
            </div>
            <TagShowcase tags={entry.data.tags}></TagShowcase>
            <ViewStatistics path={`/blog/${entry.slug}/`}/>
        </div>
        <div class="mb-10 max-h-40 max-w-80 content-center">
            {
                entry.data.sideImage && entry.data.sideImage.endsWith("svg") ?
                        <img class="rounded-xl object-contain" loading="lazy" width="200" height="200" src={sideImage}
                             alt=""/> :
                        <img class="rounded-xl object-contain" loading="lazy" src={sideImage} alt=""/>
            }
        </div>
    </div>
    <hr>
    <Article>
        <slot/>
    </Article>
    {
        entry.data.comment == true &&
            <Giscus config={GISCUS_BLOG}/>
    }
</main>
<Footer footer={FOOTER}/>
<ImageLen/>
</body>
</html>

<style>
    #Titles {
        scrollbar-width: thin;
    }
</style>

<script define:vars={{entry}}>
    localStorage.setItem(`PostTracker:blog:${entry.slug}`, JSON.stringify({
        title: entry.data.title,
        latestUpdate: entry.data.updateDate || entry.data.pubDate
    }));
    document.addEventListener('DOMContentLoaded', () => {
        const titles = document.getElementsByTagName('main')[0].querySelectorAll('h1,h2')
        const titleList = document.getElementById('Titles')

        document.getElementById('ToggleList').addEventListener('mouseover', () => {
            titleList.classList.toggle('flex')
            titleList.classList.toggle('hidden')
        })

        for (const title of titles) {
            title.id = title.textContent

            let classText = ''
            switch (title.tagName) {
                case 'H1':
                    classText = 'pl-2'
                    break
                case 'H2':
                    classText = 'pl-6'
                    break
            }
            titleList.innerHTML += `<a target="_self" id="${title.id}-a" href="#${title.id}" class="${classText}">${title.textContent}</a>`
        }

        document.addEventListener('scroll', () => {
            for (const title of titles) document.getElementById(`${title.id}-a`).classList.remove('font-extrabold', 'border-l-2', 'border-black', 'dark:border-white')
            for (const title of titles) if (title.getClientRects()[0].top > -1) {
                document.getElementById(`${title.id}-a`).classList.add('font-extrabold', 'border-l-2', 'border-black', 'dark:border-white')
                return
            }
        })
    })
</script>
