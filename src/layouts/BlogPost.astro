---
import {type CollectionEntry} from 'astro:content'

import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import {POST_HEADER, FOOTER, GISCUS_BLOG, BG_RANDOM_IMAGE_SRC, SOURCE} from "../consts";
import PostHeader from "../components/post/PostHeader.astro";
import TagShowcase from "../components/post/TagShowcase.astro";
import Giscus from "../components/post/Giscus.astro";
import IconLink from "../components/ui/IconLink.astro";
import Date from "../components/post/Date.astro";
import Article from "../components/Article.astro";
import ImageLen from "../components/ImageLen.astro";
import ViewStatistics from "../components/post/ViewStatistics.astro";
import IconButton from "../components/ui/IconButton.astro";

interface Props {
    source_base: string
    entry: CollectionEntry<'blog'>
    headings: {depth: number, slug: string, text: string}[]
}

const {source_base, entry, headings} = Astro.props;

const backgroundImage = entry.data.backgroundImage || BG_RANDOM_IMAGE_SRC

const sideImage = entry.data.sideImage?.startsWith('/') || entry.data.sideImage?.startsWith('https://') ? entry.data.sideImage : `/blog/${entry.slug}/${entry.data.sideImage}`
---

<html lang={entry.data.lang}>
<head>
    <base target="_blank"/>
    <BaseHead title={entry.data.title} data={entry.data}/>
    <script is:inline>
        function scrollToId(id) {
            document.getElementById(id).scrollIntoView({behavior: "smooth"})
        }
    </script>
</head>

<body class="flex flex-col">
<div>
    <PostHeader header={POST_HEADER} prefix="blog">
        <IconButton id="ToggleList" class="md:ml-10" icon="format_list_bulleted"/>
    </PostHeader>
</div>
<div class="h-[calc(100vh-66px)] flex bg-opacity bg-light dark:bg-dark">
    <div id="MainContentContainer" class="flex-1 overflow-y-scroll">
        <main class="p-5 lg:p-20 flex flex-col gap-10">
            <div class="flex flex-wrap gap-5 justify-between">
                <div class="flex flex-col gap-5">
                    <div class="font-bold text-5xl" id="title">{entry.data.title}</div>
                    <div class="text-2xl">{entry.data.description}</div>
                    <div class="flex flex-wrap gap-5 items-center">
                        <IconLink icon="history" href={`${SOURCE.base}/${source_base}/${entry.id}`} text="History"/>
                        <div class="text-gray-500">
                            {
                                entry.data.updateDate &&
                                    <div>Updated at
                                        <Date date={entry.data.updateDate}/>
                                    </div>
                            }
                            <div>Published at
                                <Date date={entry.data.pubDate}/>
                            </div>
                        </div>
                    </div>
                    <TagShowcase tags={entry.data.tags}></TagShowcase>
                    <ViewStatistics path={`/blog/${entry.slug}/`}/>
                </div>
                <div class="max-lg:hidden mb-10 max-h-40 max-w-80 content-center">
                    {
                        entry.data.sideImage && entry.data.sideImage.endsWith("svg") ?
                                <img class="rounded-xl object-contain" loading="lazy" width="200" height="200" src={sideImage}
                                    alt=""/> :
                                <img class="rounded-xl object-contain" loading="lazy" src={sideImage} alt=""/>
                    }
                </div>
            </div>
            <hr>
            <Article>
                <slot/>
            </Article>
            {
                entry.data.comment == true &&
                    <Giscus config={GISCUS_BLOG}/>
            }
        </main>
        <Footer footer={FOOTER}/>
    </div>
    <aside id="TableOfContent" class="overflow-y-scroll p-10 text-sm flex flex-col gap-2 duration-200 shadow-2xl">
        <a class="font-bold list-none" onclick="scrollToId('title');return false" target="_self" href="#title">{entry.data.title}</a>
        {headings.map(({depth, text, slug}) => { return (<a id={`${slug}-a`} class={`list-none pl-${depth*2}`} onclick={`scrollToId("${slug}");return false`} target="_self" href={`#${slug}`}>{text}</a>) })}
    </aside>
</div>
<ImageLen/>
</body>
</html>

<style>
    #Titles {
        scrollbar-width: thin;
    }
</style>

<script define:vars={{backgroundImage, entry, headings}}>
    localStorage.setItem(`PostTracker:blog:${entry.slug}`, JSON.stringify({
        title: entry.data.title,
        latestUpdate: entry.data.updateDate || entry.data.pubDate
    }));
    document.addEventListener('DOMContentLoaded', () => {
        document.body.style.backgroundImage = `url('${backgroundImage}')`

        const mainContainer = document.getElementById('MainContentContainer')
        const tableOfContent = document.getElementById('TableOfContent')

        document.getElementById('ToggleList').addEventListener('click', () => {
            tableOfContent.classList.toggle('flex')
            tableOfContent.classList.toggle('hidden')
        })

        mainContainer.addEventListener('scroll', () => {
            for (const {slug} of headings) {
                const classList = document.getElementById(`${slug}-a`).classList
                if (classList) classList.remove('font-extrabold', 'border-l-2', 'border-black', 'dark:border-white')
            }
            for (const {slug} of headings) if (document.getElementById(slug).getClientRects()[0].top > -1) {
                const classList = document.getElementById(`${slug}-a`).classList
                if (classList) {
                    classList.add('font-extrabold', 'border-l-2', 'border-black', 'dark:border-white')
                    return
                }
            }
        })
    })
</script>
