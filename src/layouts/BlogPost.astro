---
import {type CollectionEntry} from 'astro:content'

import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import {BLOG_HEADER, FOOTER, GISCUS_CONFIG, BG_RANDOM_IMAGE_SRC, SOURCE} from "../consts";
import BlogHeader from "../components/blog/BlogHeader.astro";
import TagShowcase from "../components/blog/TagShowcase.astro";
import Giscus from "../components/blog/Giscus.astro";
import IconLink from "../components/ui/IconLink.astro";

interface Props {
    source_base: string
    entry: CollectionEntry<'blog'>
}

const {source_base, entry} = Astro.props;

const bodyStyle = `background-image: url('${entry.data.backgroundImage || BG_RANDOM_IMAGE_SRC || ""}')`

const pubDate = entry.data.pubDate
const updatedDate = entry.data.updatedDate
---

<html lang={entry.data.lang}>
<head>
    <base target="_blank"/>
    <BaseHead title={entry.data.title} data={entry.data}/>
</head>

<body class="dark" style={bodyStyle}>
<div class="sticky top-0">
    <BlogHeader header={BLOG_HEADER}/>
</div>
<main class="min-h-screen p-5 lg:p-20 flex flex-col gap-10 bg-opacity bg-light dark:bg-dark">
    <div class="flex flex-wrap gap-5 justify-between">
        <div class="flex flex-col gap-5">
            <div class="font-bold text-6xl">{entry.data.title}</div>
            <div class="text-2xl text-gray-500">{entry.data.description}</div>
            <div class="flex flex-wrap gap-5 items-center">
                <IconLink icon="history" href={`${SOURCE.base}/${source_base}/${entry.id}`} text="History"/>
                <div class="text-gray-500">
                    {
                        entry.data.updatedDate &&
                            <div>Updated at <span id="update_date">{entry.data.updatedDate.toString()}</span></div>
                    }
                    <div>Published at <span id="publish_date">{entry.data.pubDate.toString()}</span></div>
                </div>
            </div>
            <TagShowcase tags={entry.data.tags}></TagShowcase>
        </div>
        <div class="mb-10 max-h-40 max-w-80">
            {
                entry.data.sideImage &&
                    <img class="rounded object-contain" src={entry.data.sideImage} alt=""/>
            }
        </div>
    </div>
    <hr>
    <article class="flex flex-col gap-5">
        <slot/>
    </article>
    {
        entry.data.comment == true &&
            <Giscus config={GISCUS_CONFIG}/>
    }
</main>
<Footer footer={FOOTER}/>
</body>
</html>

<script define:vars={{pubDate, updatedDate}}>
    document.addEventListener('DOMContentLoaded', () => {
        const publishDateElement = document.getElementById('publish_date')
        const updateDateElement = document.getElementById('update_date')

        publishDateElement.textContent = pubDate.toLocaleDateString()
        updateDateElement && (updateDateElement.textContent = updatedDate?.toLocaleDateString())
    })
</script>

<style>
    article {
        h1 {
            @apply mt-5 font-bold text-4xl;
        }

        h2 {
            @apply font-bold text-2xl;
        }

        h3 {
            @apply font-bold text-xl;
        }

        a {
            @apply font-bold underline text-purple-800 dark:text-purple-300;
        }

        blockquote {
            line-height: 200%;

            @apply rounded-2xl p-10 duration-200 shadow hover:shadow-xl dark:shadow-blue-500 dark:hover:shadow-blue-300 text-gray-800 dark:text-gray-200 bg-gray-300 dark:bg-gray-600;
        }

        blockquote:before {
            color: #ccc;
            content: open-quote;
            font-size: 4em;
            line-height: 0.1em;
            margin-right: 0.25em;
            vertical-align: -0.4em;
        }

        p {
            code {
                @apply rounded p-1 bg-gray-300 dark:bg-gray-600;
            }
        }

        .astro-code {
            @apply rounded-2xl p-5 duration-200 shadow hover:shadow-xl dark:shadow-blue-500 dark:hover:shadow-blue-300;
        }
    }
</style>
