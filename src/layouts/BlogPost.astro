---
import {type CollectionEntry} from 'astro:content'

import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import {POST_HEADER, FOOTER, GISCUS_BLOG, BG_IMG_SRC, COMMIT_SOURCE_URL_BASE} from "../consts";
import PostHeader from "../components/post/PostHeader.astro";
import TagShowcase from "../components/post/TagShowcase.astro";
import Giscus from "../components/post/Giscus.astro";
import IconLink from "../components/ui/IconLink.astro";
import Date from "../components/post/Date.astro";
import Article from "../components/Article.astro";
import ImageLen from "../components/ImageLen.astro";
import ViewStatistics from "../components/post/ViewStatistics.astro";
import IconButton from "../components/ui/IconButton.astro";
import TableOfContent from '../components/post/TableOfContent.astro';

interface Props {
    source_base: string
    entry: CollectionEntry<'blog'>
    headings: { depth: number, slug: string, text: string }[]
}

const {source_base, entry, headings} = Astro.props;

const sideImage = entry.data.sideImage?.startsWith('/') || entry.data.sideImage?.startsWith('https://') ? entry.data.sideImage : `/blog/${entry.slug}/${entry.data.sideImage}`

const bodyStyle = `background-image: url('${entry.data.backgroundImage || BG_IMG_SRC}')`
---

<html lang={entry.data.lang}>
<head>
    <BaseHead title={entry.data.title} data={entry.data}/>
</head>

<body class="flex flex-col bg-cover" style={bodyStyle}>
<div>
    <PostHeader header={POST_HEADER} prefix="blog">
        <IconButton id="ToggleList" class="md:ml-10" icon="format_list_bulleted"/>
    </PostHeader>
</div>
<div class="h-[calc(100vh-66px)] flex bg-opacity-80 dark:bg-opacity-80 bg-light dark:bg-dark">
    <div id="MainContentContainer" class="flex-1 overflow-y-scroll">
        <main class="p-5 lg:p-20 flex flex-col gap-10">
            <div class="flex flex-wrap gap-5 justify-between">
                <div class="flex flex-col gap-5">
                    <div class="font-bold text-5xl">{entry.data.title}</div>
                    <div class="text-2xl">{entry.data.description}</div>
                    <div class="flex flex-wrap gap-5 items-center">
                        <IconLink icon="history" href={`${COMMIT_SOURCE_URL_BASE.base}/${source_base}/${entry.id}`}
                                  text="History"/>
                        <div class="text-gray-500">
                            {
                                entry.data.updateDate &&
                                    <div>Updated at
                                        <Date date={entry.data.updateDate}/>
                                    </div>
                            }
                            <div>Published at
                                <Date date={entry.data.pubDate}/>
                            </div>
                        </div>
                    </div>
                    <TagShowcase tags={entry.data.tags}></TagShowcase>
                    <ViewStatistics path={`/blog/${entry.slug}/`}/>
                </div>
                <div class="max-lg:hidden mb-10 max-h-40 max-w-80 content-center">
                    {
                        entry.data.sideImage && entry.data.sideImage.endsWith("svg") ?
                                <img class="rounded-xl object-contain" loading="lazy" width="200" height="200"
                                     src={sideImage}
                                     alt=""/> :
                                <img class="rounded-xl object-contain" loading="lazy" src={sideImage} alt=""/>
                    }
                </div>
            </div>
            <hr>
            <Article>
                <slot/>
            </Article>
            {
                entry.data.comment == true &&
                    <Giscus config={GISCUS_BLOG}/>
            }
        </main>
        <Footer footer={FOOTER}/>
    </div>
    <aside id="TableOfContent"
           class="md:max-w-[20vw] overflow-y-scroll p-10 pl-6 text-sm flex flex-col gap-2 duration-200 shadow-2xl">
        <div class="font-bold list-none">{entry.data.title}</div>
        <TableOfContent headings={headings}/>
    </aside>
</div>
<ImageLen/>
</body>
</html>

<style>
    #Titles {
        scrollbar-width: thin;
    }
</style>

<script define:vars={{entry, headings}}>
    localStorage.setItem(`PostTracker:blog:${entry.slug}`, JSON.stringify({
        title: entry.data.title,
        latestUpdate: entry.data.updateDate || entry.data.pubDate
    }))

    document.addEventListener('DOMContentLoaded', () => {
        const mainContainer = document.getElementById('MainContentContainer')
        const tableOfContent = document.getElementById('TableOfContent')

        const isSmall = window.matchMedia("(max-width: 700px)").matches

        let currentSlug = ""

        const toggle = () => {
            tableOfContent.classList.toggle('flex')
            tableOfContent.classList.toggle('hidden')
            if (isSmall) {
                tableOfContent.classList.contains('hidden') ? mainContainer.classList.remove('hidden') : mainContainer.classList.add('hidden')
                document.getElementById(currentSlug)?.scrollIntoView({behavior: "smooth"})
            }
        }

        if (isSmall) toggle()

        document.getElementById('ToggleList').addEventListener('click', toggle)

        for (const {slug} of headings) {
            const anchor = document.getElementById(`${slug}-a`)
            if (anchor) {
                if (isSmall) {
                    anchor.onclick = () => {
                        currentSlug = slug
                    }
                } else {
                    anchor.onclick = () => {
                        document.getElementById(slug).scrollIntoView({behavior: "smooth"})
                        return false
                    }
                }
            }
        }
    })
</script>
